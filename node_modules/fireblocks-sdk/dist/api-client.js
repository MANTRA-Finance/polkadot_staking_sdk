"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const request_promise_native_1 = __importDefault(require("request-promise-native"));
class ApiClient {
    constructor(authProvider, apiBaseUrl) {
        this.authProvider = authProvider;
        this.apiBaseUrl = apiBaseUrl;
    }
    issueGetRequest(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.authProvider.signJwt(path);
            return yield request_promise_native_1.default.get({
                uri: this.apiBaseUrl + path,
                headers: {
                    "X-API-Key": this.authProvider.getApiKey(),
                    "Authorization": `Bearer ${token}`
                },
                json: true
            });
        });
    }
    issuePostRequest(path, body, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.authProvider.signJwt(path, body);
            const idempotencyKey = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.idempotencyKey;
            return yield request_promise_native_1.default.post({
                uri: this.apiBaseUrl + path,
                headers: {
                    "X-API-Key": this.authProvider.getApiKey(),
                    "Authorization": `Bearer ${token}`,
                    "Idempotency-Key": idempotencyKey
                },
                body: body,
                json: true
            });
        });
    }
    issuePutRequest(path, body) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.authProvider.signJwt(path, body);
            return yield request_promise_native_1.default.put({
                uri: this.apiBaseUrl + path,
                headers: {
                    "X-API-Key": this.authProvider.getApiKey(),
                    "Authorization": `Bearer ${token}`
                },
                body: body,
                json: true
            });
        });
    }
    issueDeleteRequest(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = this.authProvider.signJwt(path);
            return yield request_promise_native_1.default.delete({
                uri: this.apiBaseUrl + path,
                headers: {
                    "X-API-Key": this.authProvider.getApiKey(),
                    "Authorization": `Bearer ${token}`
                },
                json: true
            });
        });
    }
}
exports.ApiClient = ApiClient;
//# sourceMappingURL=api-client.js.map