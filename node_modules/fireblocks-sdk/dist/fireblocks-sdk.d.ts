import { VaultAccountResponse, CreateTransactionResponse, TransactionArguments, AssetResponse, ExchangeResponse, TransactionResponse, TransactionFilter, CancelTransactionResponse, WalletContainerResponse, WalletAssetResponse, DepositAddressResponse, GenerateAddressResponse, OperationSuccessResponse, NetworkConnectionResponse, FiatAccountResponse, CreateTransferTicketArgs, TransferTicketResponse, TermResponse, ExecuteTermArgs, CreateTransferTicketResponse, EstimateTransactionFeeResponse, EstimateFeeResponse, PublicKeyInfoArgs, PublicKeyInfoForVaultAccountArgs, GasStationInfo, MaxSpendableAmountResponse, VaultAccountsFilter, RequestOptions, VaultBalancesFilter, ValidateAddressResponse, CreateVaultAssetResponse } from "./types";
export * from "./types";
export declare class FireblocksSDK {
    private authProvider;
    private apiBaseUrl;
    private apiClient;
    /**
     * Creates a new Fireblocks API Client
     * @param privateKey A string representation of your private key
     * @param apiKey Your api key. This is a uuid you received from Fireblocks
     * @param apiBaseUrl The fireblocks server URL. Leave empty to use the default server
     */
    constructor(privateKey: string, apiKey: string, apiBaseUrl?: string);
    /**
     * Gets all assets that are currently supported by Fireblocks
     */
    getSupportedAssets(): Promise<VaultAccountResponse[]>;
    /**
     * Gets all vault accounts for your tenant
     */
    getVaultAccounts(filter?: VaultAccountsFilter): Promise<VaultAccountResponse[]>;
    /**
     * @deprecated Replaced by getVaultAccountById.
     * Gets a single vault account
     * @param vaultAccountId The vault account ID
     */
    getVaultAccount(vaultAccountId: string): Promise<VaultAccountResponse>;
    /**
     * Gets a single vault account
     * @param vaultAccountId The vault account ID
     */
    getVaultAccountById(vaultAccountId: string): Promise<VaultAccountResponse>;
    /**
     * Gets a single vault account asset
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset to get
     */
    getVaultAccountAsset(vaultAccountId: string, assetId: string): Promise<AssetResponse>;
    /**
     * Gets deposit addresses for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to get the deposit address
     */
    getDepositAddresses(vaultAccountId: string, assetId: string): Promise<DepositAddressResponse[]>;
    /**
     * Generates a new address for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to generate the deposit address
     * @param description A description for the new address
     * @param customerRefId A customer reference ID
     */
    generateNewAddress(vaultAccountId: string, assetId: string, description?: string, customerRefId?: string): Promise<GenerateAddressResponse>;
    /**
     * Sets the description of an existing address
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset
     * @param address The address for which to set the description
     * @param tag The XRP tag, or EOS memo, for which to set the description
     * @param description The description to set
     */
    setAddressDescription(vaultAccountId: string, assetId: string, address: string, tag?: string, description?: string): Promise<GenerateAddressResponse>;
    /**
     * Gets all network connections
     */
    getNetworkConnections(): Promise<NetworkConnectionResponse[]>;
    /**
     * Gets a single network connection by id
     */
    getNetworkConnectionById(connectionId: string): Promise<NetworkConnectionResponse>;
    /**
     * Gets all exchange accounts for your tenant
     */
    getExchangeAccounts(): Promise<ExchangeResponse[]>;
    /**
     * @deprecated Replaced by getExchangeAccountById
     * Gets a single exchange account by ID
     * @param exchangeAccountId The exchange account ID
     */
    getExchangeAccount(exchangeAccountId: string): Promise<ExchangeResponse>;
    /**
     * Gets a single exchange account by ID
     * @param exchangeAccountId The exchange account ID
     */
    getExchangeAccountById(exchangeAccountId: string): Promise<ExchangeResponse>;
    /**
     * Transfer from a main exchange account to a subaccount
     * @param exchangeAccountId The exchange ID in Fireblocks
     * @param subaccountId The ID of the subaccount in the exchange
     * @param assetId The asset to transfer
     * @param amount The amount to transfer
     */
    transferToSubaccount(exchangeAccountId: string, subaccountId: string, assetId: string, amount: number): Promise<OperationSuccessResponse>;
    /**
     * Transfer from a subaccount to a main exchange account
     * @param exchangeAccountId The exchange ID in Fireblocks
     * @param subaccountId The ID of the subaccount in the exchange
     * @param assetId The asset to transfer
     * @param amount The amount to transfer
     */
    transferFromSubaccount(exchangeAccountId: string, subaccountId: string, assetId: string, amount: number): Promise<OperationSuccessResponse>;
    /**
     * Gets all fiat accounts for your tenant
     */
    getFiatAccounts(): Promise<FiatAccountResponse[]>;
    /**
     * Gets a single fiat account by ID
     * @param accountId The fiat account ID
     */
    getFiatAccountById(accountId: string): Promise<FiatAccountResponse>;
    /**
     * Redeem from a fiat account to a linked DDA
     * @param accountId The fiat account ID in Fireblocks
     * @param amount The amount to transfer
     */
    redeemToLinkedDDA(accountId: string, amount: number): Promise<OperationSuccessResponse>;
    /**
     * Deposit to a fiat account from a linked DDA
     * @param accountId The fiat account ID in Fireblocks
     * @param amount The amount to transfer
     */
    depositFromLinkedDDA(accountId: string, amount: number): Promise<OperationSuccessResponse>;
    /**
     * Gets a list of transactions matching the given filter
     * @param filter.before Only gets transactions created before a given timestamp (in milliseconds)
     * @param filter.after Only gets transactions created after a given timestamp (in milliseconds)
     * @param filter.status Only gets transactions with the spcified status
     * @param filter.limit Limit the amount of returned results. If not specified, a limit of 200 results will be used
     * @param filter.orderBy Determines the order of the results
     */
    getTransactions(filter: TransactionFilter): Promise<TransactionResponse[]>;
    /**
     * Gets all internal wallets for your tenant
     */
    getInternalWallets(): Promise<WalletContainerResponse[]>;
    /**
     * Gets a single internal wallet
     * @param walletId The internal wallet ID
     */
    getInternalWallet(walletId: string): Promise<WalletContainerResponse>;
    /**
     * Gets a single internal wallet asset
     * @param walletId The internal wallet ID
     * @param assetId The asset ID
     */
    getInternalWalletAsset(walletId: string, assetId: string): Promise<WalletAssetResponse>;
    /**
     * Gets all external wallets for your tenant
     */
    getExternalWallets(): Promise<WalletContainerResponse[]>;
    /**
     * Gets a single external wallet
     * @param walletId The external wallet ID
     */
    getExternalWallet(walletId: string): Promise<WalletContainerResponse>;
    /**
     * Gets a single external wallet asset
     * @param walletId The external wallet ID
     * @param assetId The asset ID
     */
    getExternalWalletAsset(walletId: string, assetId: string): Promise<WalletAssetResponse>;
    /**
     * Gets detailed information for a single transaction
     * @param txId The transaction id to query
     */
    getTransactionById(txId: string): Promise<TransactionResponse>;
    /**
     * Cancels the selected transaction
     * @param txId The transaction id to cancel
     */
    cancelTransactionById(txId: string): Promise<CancelTransactionResponse>;
    /**
     * Creates a new vault account
     * @param name A name for the new vault account
     * @param hiddenOnUI If true, the created account and all related transactions will not be shown on Fireblocks console
     * @param customerRefId A customer reference ID
     */
    createVaultAccount(name: string, hiddenOnUI?: boolean, customerRefId?: string, autoFuel?: boolean): Promise<VaultAccountResponse>;
    /**
     * Hides a vault account in Fireblocks console
     * @param vaultAccountId The vault account ID
     */
    hideVaultAccount(vaultAccountId: string): Promise<OperationSuccessResponse>;
    /**
     * Reveals a hidden vault account in Fireblocks console
     * @param vaultAccountId The vault account ID
     */
    unhideVaultAccount(vaultAccountId: string): Promise<OperationSuccessResponse>;
    /**
     * Sets autoFuel to true/false for a vault account
     * @param vaultAccountId The vault account ID
     * @param autoFuel The new value for the autoFuel flag
     */
    setAutoFuel(vaultAccountId: string, autoFuel: boolean): Promise<OperationSuccessResponse>;
    /**
     * Updates a vault account
     * @param name A new name for the vault account
     */
    updateVaultAccount(vaultAccountId: string, name: string): Promise<VaultAccountResponse>;
    /**
     * Creates a new asset within an existing vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The asset to add
     */
    createVaultAsset(vaultAccountId: string, assetId: string): Promise<CreateVaultAssetResponse>;
    /**
     * Creates a new external wallet
     * @param name A name for the new external wallet
     * @param customerRefId A customer reference ID
     */
    createExternalWallet(name: string, customerRefId?: string): Promise<WalletContainerResponse>;
    /**
     * Creates a new internal wallet
     * @param name A name for the new internal wallet
     * @param customerRefId A customer reference ID
     */
    createInternalWallet(name: string, customerRefId?: string): Promise<WalletContainerResponse>;
    /**
     * Creates a new asset within an exiting external wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     */
    createExternalWalletAsset(walletId: string, assetId: string, address: string, tag?: string): Promise<WalletAssetResponse>;
    /**
     * Creates a new asset within an exiting internal wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     */
    createInternalWalletAsset(walletId: string, assetId: string, address: string, tag?: string): Promise<WalletAssetResponse>;
    /**
     * Creates a new transaction with the specified options
     */
    createTransaction(transactionArguments: TransactionArguments, requestOptions?: RequestOptions): Promise<CreateTransactionResponse>;
    /**
     * Estimates the fee for a transaction request
     */
    estimateFeeForTransaction(transactionArguments: TransactionArguments): Promise<EstimateTransactionFeeResponse>;
    /**
     * Gets the estimated fees for an asset
     */
    getFeeForAsset(asset: string): Promise<EstimateFeeResponse>;
    /**
     * Creates a new transfer ticket
     */
    createTransferTicket(options: CreateTransferTicketArgs): Promise<CreateTransferTicketResponse>;
    /**
     * Gets all transfer tickets
     */
    getTransferTickets(): Promise<TransferTicketResponse[]>;
    /**
     * Get a transfer ticket by ticket ID
     * @param ticketId
     */
    getTransferTicketById(ticketId: string): Promise<TransferTicketResponse>;
    /**
     * Get a term of transfer ticket
     * @param ticketId
     * @param termId
     */
    getTransferTicketTerm(ticketId: string, termId: string): Promise<TermResponse>;
    /**
     * Cancel the transfer ticket
     * @param ticketId
     */
    cancelTransferTicket(ticketId: string): Promise<any>;
    /**
     * Executes a transaction for a single term of a transfer ticket
     * @param ticketId
     * @param termId
     * @param options
     */
    executeTransferTicketTerm(ticketId: string, termId: string, options: ExecuteTermArgs): Promise<any>;
    /**
     * Deletes a single internal wallet
     * @param walletId The internal wallet ID
     */
    deleteInternalWallet(walletId: string): Promise<OperationSuccessResponse>;
    /**
     * Deletes a single internal wallet asset
     * @param walletId The internal wallet ID
     * @param assetId The asset ID
     */
    deleteInternalWalletAsset(walletId: string, assetId: string): Promise<WalletAssetResponse>;
    /**
     * Deletes a single external wallet
     * @param walletId The external wallet ID
     */
    deleteExternalWallet(walletId: string): Promise<OperationSuccessResponse>;
    /**
     * Deletes a single external wallet asset
     * @param walletId The external wallet ID
     * @param assetId The asset ID
     */
    deleteExternalWalletAsset(walletId: string, assetId: string): Promise<WalletAssetResponse>;
    /**
     * Sets a customer reference ID
     * @param vaultAccountId The vault account ID
     * @param customerRefId The customer reference ID to set
     */
    setCustomerRefIdForVaultAccount(vaultAccountId: string, customerRefId: string): Promise<OperationSuccessResponse>;
    /**
     * Sets a customer reference ID
     * @param walletId The ID of the internal wallet
     * @param customerRefId The customer reference ID to set
     */
    setCustomerRefIdForInternalWallet(walletId: string, customerRefId: string): Promise<OperationSuccessResponse>;
    /**
     * Sets a customer reference ID
     * @param walletId The ID of the external wallet
     * @param customerRefId The customer reference ID to set
     */
    setCustomerRefIdForExternalWallet(walletId: string, customerRefId: string): Promise<OperationSuccessResponse>;
    /**
     * Sets a customer reference ID
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset
     * @param address The address
     * @param tag The XRP tag, or EOS memo
     * @param customerRefId The customer reference ID to set
     */
    setCustomerRefIdForAddress(vaultAccountId: string, assetId: string, address: string, tag?: string, customerRefId?: string): Promise<OperationSuccessResponse>;
    /**
     * Set the required number of confirmations for transaction
     * @param txId
     * @param requiredConfirmationsNumber
     */
    setConfirmationThresholdForTxId(txId: string, requiredConfirmationsNumber: number): Promise<OperationSuccessResponse>;
    /**
     * Set the required number of confirmations for transactions by tx hash
     * @param txHash
     * @param requiredConfirmationsNumber
     */
    setConfirmationThresholdForTxHash(txHash: string, requiredConfirmationsNumber: number): Promise<OperationSuccessResponse>;
    /**
     * Get the public key information
     * @param args
     */
    getPublicKeyInfo(args: PublicKeyInfoArgs): Promise<any>;
    /**
     * Get the public key information for a vault account
     * @param args
     */
    getPublicKeyInfoForVaultAccount(args: PublicKeyInfoForVaultAccountArgs): Promise<any>;
    /**
     * Get configuration and status of the Gas Station account
     */
    getGasStationInfo(): Promise<GasStationInfo>;
    /**
     * Set configuration of the Gas Station account
     */
    setGasStationConfiguration(gasThreshold: string, gasCap: string, maxGasPrice?: string): Promise<OperationSuccessResponse>;
    /**
     * Drop an ETH based transaction
     */
    dropTransaction(txId: string, feeLevel?: string, requestedFee?: string): Promise<any>;
    /**
     * Get max spendable amount per asset and vault
     */
    getMaxSpendableAmount(vaultAccountId: string, assetId: string, manualSigning?: Boolean): Promise<MaxSpendableAmountResponse>;
    /**
     * Get all vault assets balance overview
     */
    getVaultAssetsBalance(filter: VaultBalancesFilter): Promise<AssetResponse[]>;
    /**
     * Get vault balance overview per asset
     */
    getVaultBalanceByAsset(assetId: string): Promise<AssetResponse>;
    /**
     * Get address validation info
     */
    validateAddress(assetId: string, address: string): Promise<ValidateAddressResponse>;
}
