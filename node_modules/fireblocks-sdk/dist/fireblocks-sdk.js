"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FireblocksSDK = void 0;
const api_client_1 = require("./api-client");
const api_token_provider_1 = require("./api-token-provider");
__exportStar(require("./types"), exports);
const query_string_1 = __importDefault(require("query-string"));
class FireblocksSDK {
    /**
     * Creates a new Fireblocks API Client
     * @param privateKey A string representation of your private key
     * @param apiKey Your api key. This is a uuid you received from Fireblocks
     * @param apiBaseUrl The fireblocks server URL. Leave empty to use the default server
     */
    constructor(privateKey, apiKey, apiBaseUrl = "https://api.fireblocks.io") {
        this.authProvider = new api_token_provider_1.ApiTokenProvider(privateKey, apiKey);
        if (apiBaseUrl) {
            this.apiBaseUrl = apiBaseUrl;
        }
        this.apiClient = new api_client_1.ApiClient(this.authProvider, this.apiBaseUrl);
    }
    /**
     * Gets all assets that are currently supported by Fireblocks
     */
    getSupportedAssets() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/supported_assets");
        });
    }
    /**
     * Gets all vault accounts for your tenant
     */
    getVaultAccounts(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/vault/accounts?${query_string_1.default.stringify(filter)}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * @deprecated Replaced by getVaultAccountById.
     * Gets a single vault account
     * @param vaultAccountId The vault account ID
     */
    getVaultAccount(vaultAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getVaultAccountById(vaultAccountId);
        });
    }
    /**
     * Gets a single vault account
     * @param vaultAccountId The vault account ID
     */
    getVaultAccountById(vaultAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/vault/accounts/${vaultAccountId}`);
        });
    }
    /**
     * Gets a single vault account asset
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset to get
     */
    getVaultAccountAsset(vaultAccountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}`);
        });
    }
    /**
     * Gets deposit addresses for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to get the deposit address
     */
    getDepositAddresses(vaultAccountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/addresses`);
        });
    }
    /**
     * Generates a new address for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to generate the deposit address
     * @param description A description for the new address
     * @param customerRefId A customer reference ID
     */
    generateNewAddress(vaultAccountId, assetId, description, customerRefId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/addresses`, {
                description,
                customerRefId
            });
        });
    }
    /**
     * Sets the description of an existing address
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset
     * @param address The address for which to set the description
     * @param tag The XRP tag, or EOS memo, for which to set the description
     * @param description The description to set
     */
    setAddressDescription(vaultAccountId, assetId, address, tag, description) {
        return __awaiter(this, void 0, void 0, function* () {
            let addressId = address;
            if (tag && tag.length > 0) {
                addressId = `${address}:${tag}`;
            }
            return yield this.apiClient.issuePutRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/addresses/${addressId}`, { description: description || "" });
        });
    }
    /**
     * Gets all network connections
     */
    getNetworkConnections() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/network_connections");
        });
    }
    /**
     * Gets a single network connection by id
     */
    getNetworkConnectionById(connectionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/network_connections/${connectionId}`);
        });
    }
    /**
     * Gets all exchange accounts for your tenant
     */
    getExchangeAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/exchange_accounts");
        });
    }
    /**
     * @deprecated Replaced by getExchangeAccountById
     * Gets a single exchange account by ID
     * @param exchangeAccountId The exchange account ID
     */
    getExchangeAccount(exchangeAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getExchangeAccount(exchangeAccountId);
        });
    }
    /**
     * Gets a single exchange account by ID
     * @param exchangeAccountId The exchange account ID
     */
    getExchangeAccountById(exchangeAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/exchange_accounts/${exchangeAccountId}`);
        });
    }
    /**
     * Transfer from a main exchange account to a subaccount
     * @param exchangeAccountId The exchange ID in Fireblocks
     * @param subaccountId The ID of the subaccount in the exchange
     * @param assetId The asset to transfer
     * @param amount The amount to transfer
     */
    transferToSubaccount(exchangeAccountId, subaccountId, assetId, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                subaccountId,
                amount
            };
            return yield this.apiClient.issuePostRequest(`/v1/exchange_accounts/${exchangeAccountId}/${assetId}/transfer_to_subaccount`, body);
        });
    }
    /**
     * Transfer from a subaccount to a main exchange account
     * @param exchangeAccountId The exchange ID in Fireblocks
     * @param subaccountId The ID of the subaccount in the exchange
     * @param assetId The asset to transfer
     * @param amount The amount to transfer
     */
    transferFromSubaccount(exchangeAccountId, subaccountId, assetId, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                subaccountId,
                amount
            };
            return yield this.apiClient.issuePostRequest(`/v1/exchange_accounts/${exchangeAccountId}/${assetId}/transfer_from_subaccount`, body);
        });
    }
    /**
     * Gets all fiat accounts for your tenant
     */
    getFiatAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/fiat_accounts");
        });
    }
    /**
     * Gets a single fiat account by ID
     * @param accountId The fiat account ID
     */
    getFiatAccountById(accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/fiat_accounts/${accountId}`);
        });
    }
    /**
     * Redeem from a fiat account to a linked DDA
     * @param accountId The fiat account ID in Fireblocks
     * @param amount The amount to transfer
     */
    redeemToLinkedDDA(accountId, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                amount
            };
            return yield this.apiClient.issuePostRequest(`/v1/fiat_accounts/${accountId}/redeem_to_linked_dda`, body);
        });
    }
    /**
     * Deposit to a fiat account from a linked DDA
     * @param accountId The fiat account ID in Fireblocks
     * @param amount The amount to transfer
     */
    depositFromLinkedDDA(accountId, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                amount
            };
            return yield this.apiClient.issuePostRequest(`/v1/fiat_accounts/${accountId}/deposit_from_linked_dda`, body);
        });
    }
    /**
     * Gets a list of transactions matching the given filter
     * @param filter.before Only gets transactions created before a given timestamp (in milliseconds)
     * @param filter.after Only gets transactions created after a given timestamp (in milliseconds)
     * @param filter.status Only gets transactions with the spcified status
     * @param filter.limit Limit the amount of returned results. If not specified, a limit of 200 results will be used
     * @param filter.orderBy Determines the order of the results
     */
    getTransactions(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transactions?${query_string_1.default.stringify(filter)}`);
        });
    }
    /**
     * Gets all internal wallets for your tenant
     */
    getInternalWallets() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/internal_wallets");
        });
    }
    /**
     * Gets a single internal wallet
     * @param walletId The internal wallet ID
     */
    getInternalWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/internal_wallets/${walletId}`);
        });
    }
    /**
     * Gets a single internal wallet asset
     * @param walletId The internal wallet ID
     * @param assetId The asset ID
     */
    getInternalWalletAsset(walletId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/internal_wallets/${walletId}/${assetId}`);
        });
    }
    /**
     * Gets all external wallets for your tenant
     */
    getExternalWallets() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/external_wallets");
        });
    }
    /**
     * Gets a single external wallet
     * @param walletId The external wallet ID
     */
    getExternalWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/external_wallets/${walletId}`);
        });
    }
    /**
     * Gets a single external wallet asset
     * @param walletId The external wallet ID
     * @param assetId The asset ID
     */
    getExternalWalletAsset(walletId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/external_wallets/${walletId}/${assetId}`);
        });
    }
    /**
     * Gets detailed information for a single transaction
     * @param txId The transaction id to query
     */
    getTransactionById(txId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transactions/${txId}`);
        });
    }
    /**
     * Cancels the selected transaction
     * @param txId The transaction id to cancel
     */
    cancelTransactionById(txId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/transactions/${txId}/cancel`, {});
        });
    }
    /**
     * Creates a new vault account
     * @param name A name for the new vault account
     * @param hiddenOnUI If true, the created account and all related transactions will not be shown on Fireblocks console
     * @param customerRefId A customer reference ID
     */
    createVaultAccount(name, hiddenOnUI, customerRefId, autoFuel) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                name,
                customerRefId,
                hiddenOnUI: hiddenOnUI || false,
                autoFuel: autoFuel || false
            };
            return yield this.apiClient.issuePostRequest("/v1/vault/accounts", body);
        });
    }
    /**
     * Hides a vault account in Fireblocks console
     * @param vaultAccountId The vault account ID
     */
    hideVaultAccount(vaultAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/hide`, {});
        });
    }
    /**
     * Reveals a hidden vault account in Fireblocks console
     * @param vaultAccountId The vault account ID
     */
    unhideVaultAccount(vaultAccountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/unhide`, {});
        });
    }
    /**
     * Sets autoFuel to true/false for a vault account
     * @param vaultAccountId The vault account ID
     * @param autoFuel The new value for the autoFuel flag
     */
    setAutoFuel(vaultAccountId, autoFuel) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/set_auto_fuel`, { autoFuel });
        });
    }
    /**
     * Updates a vault account
     * @param name A new name for the vault account
     */
    updateVaultAccount(vaultAccountId, name) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                name: name
            };
            return yield this.apiClient.issuePutRequest(`/v1/vault/accounts/${vaultAccountId}`, body);
        });
    }
    /**
     * Creates a new asset within an existing vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The asset to add
     */
    createVaultAsset(vaultAccountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}`, {});
        });
    }
    /**
     * Creates a new external wallet
     * @param name A name for the new external wallet
     * @param customerRefId A customer reference ID
     */
    createExternalWallet(name, customerRefId) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                name,
                customerRefId
            };
            return yield this.apiClient.issuePostRequest("/v1/external_wallets", body);
        });
    }
    /**
     * Creates a new internal wallet
     * @param name A name for the new internal wallet
     * @param customerRefId A customer reference ID
     */
    createInternalWallet(name, customerRefId) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = {
                name,
                customerRefId
            };
            return yield this.apiClient.issuePostRequest("/v1/internal_wallets", body);
        });
    }
    /**
     * Creates a new asset within an exiting external wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     */
    createExternalWalletAsset(walletId, assetId, address, tag) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = `/v1/external_wallets/${walletId}/${assetId}`;
            const body = {
                address: address,
                tag: tag
            };
            return yield this.apiClient.issuePostRequest(path, body);
        });
    }
    /**
     * Creates a new asset within an exiting internal wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     */
    createInternalWalletAsset(walletId, assetId, address, tag) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = `/v1/internal_wallets/${walletId}/${assetId}`;
            const body = {
                address: address,
                tag: tag
            };
            return yield this.apiClient.issuePostRequest(path, body);
        });
    }
    /**
     * Creates a new transaction with the specified options
     */
    createTransaction(transactionArguments, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest("/v1/transactions", transactionArguments, requestOptions);
        });
    }
    /**
     * Estimates the fee for a transaction request
     */
    estimateFeeForTransaction(transactionArguments) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest("/v1/transactions/estimate_fee", transactionArguments);
        });
    }
    /**
     * Gets the estimated fees for an asset
     */
    getFeeForAsset(asset) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/estimate_network_fee?assetId=${asset}`);
        });
    }
    /**
     * Creates a new transfer ticket
     */
    createTransferTicket(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest("/v1/transfer_tickets", options);
        });
    }
    /**
     * Gets all transfer tickets
     */
    getTransferTickets() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest("/v1/transfer_tickets");
        });
    }
    /**
     * Get a transfer ticket by ticket ID
     * @param ticketId
     */
    getTransferTicketById(ticketId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transfer_tickets/${ticketId}`);
        });
    }
    /**
     * Get a term of transfer ticket
     * @param ticketId
     * @param termId
     */
    getTransferTicketTerm(ticketId, termId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/transfer_tickets/${ticketId}/${termId}`);
        });
    }
    /**
     * Cancel the transfer ticket
     * @param ticketId
     */
    cancelTransferTicket(ticketId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/transfer_tickets/${ticketId}/cancel`, {});
        });
    }
    /**
     * Executes a transaction for a single term of a transfer ticket
     * @param ticketId
     * @param termId
     * @param options
     */
    executeTransferTicketTerm(ticketId, termId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/transfer_tickets/${ticketId}/${termId}/transfer`, options);
        });
    }
    /**
     * Deletes a single internal wallet
     * @param walletId The internal wallet ID
     */
    deleteInternalWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/internal_wallets/${walletId}`);
        });
    }
    /**
     * Deletes a single internal wallet asset
     * @param walletId The internal wallet ID
     * @param assetId The asset ID
     */
    deleteInternalWalletAsset(walletId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/internal_wallets/${walletId}/${assetId}`);
        });
    }
    /**
     * Deletes a single external wallet
     * @param walletId The external wallet ID
     */
    deleteExternalWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/external_wallets/${walletId}`);
        });
    }
    /**
     * Deletes a single external wallet asset
     * @param walletId The external wallet ID
     * @param assetId The asset ID
     */
    deleteExternalWalletAsset(walletId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`/v1/external_wallets/${walletId}/${assetId}`);
        });
    }
    /**
     * Sets a customer reference ID
     * @param vaultAccountId The vault account ID
     * @param customerRefId The customer reference ID to set
     */
    setCustomerRefIdForVaultAccount(vaultAccountId, customerRefId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/set_customer_ref_id`, { customerRefId });
        });
    }
    /**
     * Sets a customer reference ID
     * @param walletId The ID of the internal wallet
     * @param customerRefId The customer reference ID to set
     */
    setCustomerRefIdForInternalWallet(walletId, customerRefId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/internal_wallets/${walletId}/set_customer_ref_id`, { customerRefId });
        });
    }
    /**
     * Sets a customer reference ID
     * @param walletId The ID of the external wallet
     * @param customerRefId The customer reference ID to set
     */
    setCustomerRefIdForExternalWallet(walletId, customerRefId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/external_wallets/${walletId}/set_customer_ref_id`, { customerRefId });
        });
    }
    /**
     * Sets a customer reference ID
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset
     * @param address The address
     * @param tag The XRP tag, or EOS memo
     * @param customerRefId The customer reference ID to set
     */
    setCustomerRefIdForAddress(vaultAccountId, assetId, address, tag, customerRefId) {
        return __awaiter(this, void 0, void 0, function* () {
            let addressId = address;
            if (tag && tag.length > 0) {
                addressId = `${address}:${tag}`;
            }
            return yield this.apiClient.issuePostRequest(`/v1/vault/accounts/${vaultAccountId}/${assetId}/addresses/${addressId}/set_customer_ref_id`, { customerRefId });
        });
    }
    /**
     * Set the required number of confirmations for transaction
     * @param txId
     * @param requiredConfirmationsNumber
     */
    setConfirmationThresholdForTxId(txId, requiredConfirmationsNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/transactions/${txId}/set_confirmation_threshold`, { numOfConfirmations: requiredConfirmationsNumber });
        });
    }
    /**
     * Set the required number of confirmations for transactions by tx hash
     * @param txHash
     * @param requiredConfirmationsNumber
     */
    setConfirmationThresholdForTxHash(txHash, requiredConfirmationsNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`/v1/txHash/${txHash}/set_confirmation_threshold`, { numOfConfirmations: requiredConfirmationsNumber });
        });
    }
    /**
     * Get the public key information
     * @param args
     */
    getPublicKeyInfo(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/v1/vault/public_key_info`;
            if (args.algorithm) {
                url += `?algorithm=${args.algorithm}`;
            }
            if (args.derivationPath) {
                url += `&derivationPath=${args.derivationPath}`;
            }
            if (args.compressed) {
                url += `&compressed=${args.compressed}`;
            }
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get the public key information for a vault account
     * @param args
     */
    getPublicKeyInfoForVaultAccount(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/v1/vault/accounts/${args.vaultAccountId}/${args.assetId}/${args.change}/${args.addressIndex}/public_key_info`;
            if (args.compressed) {
                url += `?compressed=${args.compressed}`;
            }
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get configuration and status of the Gas Station account
     */
    getGasStationInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/gas_station`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Set configuration of the Gas Station account
     */
    setGasStationConfiguration(gasThreshold, gasCap, maxGasPrice) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/gas_station/configuration`;
            const body = { gasThreshold, gasCap, maxGasPrice };
            return yield this.apiClient.issuePutRequest(url, body);
        });
    }
    /**
     * Drop an ETH based transaction
     */
    dropTransaction(txId, feeLevel, requestedFee) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/transactions/${txId}/drop`;
            const body = { feeLevel, requestedFee };
            return yield this.apiClient.issuePostRequest(url, body);
        });
    }
    /**
     * Get max spendable amount per asset and vault
     */
    getMaxSpendableAmount(vaultAccountId, assetId, manualSigning) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/v1/vault/accounts/${vaultAccountId}/${assetId}/max_spendable_amount`;
            if (manualSigning) {
                url += `?manualSigning=${manualSigning}`;
            }
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get all vault assets balance overview
     */
    getVaultAssetsBalance(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/vault/assets?${query_string_1.default.stringify(filter)}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get vault balance overview per asset
     */
    getVaultBalanceByAsset(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/vault/assets/${assetId}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    /**
     * Get address validation info
     */
    validateAddress(assetId, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `/v1/transactions/validate_address/${assetId}/${address}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
}
exports.FireblocksSDK = FireblocksSDK;
//# sourceMappingURL=fireblocks-sdk.js.map